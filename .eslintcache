[{"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/index.js":"1","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/App.js":"2","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/reportWebVitals.js":"3","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/login/index.js":"4","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/constants/index.js":"5","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/utils/index.js":"6","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/assets/bg-landing.js":"7","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/login/bg-shapes.js":"8","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/chat-room/index.js":"9","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/chat-room/target-user/index.js":"10","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/chat-room/chat/index.js":"11"},{"size":449,"mtime":1612103387828,"results":"12","hashOfConfig":"13"},{"size":4453,"mtime":1612124045122,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1612037878379,"results":"15","hashOfConfig":"13"},{"size":2041,"mtime":1612123472203,"results":"16","hashOfConfig":"13"},{"size":94,"mtime":1612083954960,"results":"17","hashOfConfig":"13"},{"size":225,"mtime":1612124328404,"results":"18","hashOfConfig":"13"},{"size":1904,"mtime":1612122941994,"results":"19","hashOfConfig":"13"},{"size":841,"mtime":1612092385633,"results":"20","hashOfConfig":"13"},{"size":2562,"mtime":1612124408447,"results":"21","hashOfConfig":"13"},{"size":996,"mtime":1612122767337,"results":"22","hashOfConfig":"13"},{"size":3029,"mtime":1612124172692,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"yumzh",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/index.js",[],["48","49"],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/App.js",["50","51"],"import { useState } from 'react';\nimport Peer from 'peerjs';\n\nimport ChatRoom from './components/chat-room';\nimport Login from './components/login';\n\nimport { getPeerId, getUsername } from './utils';\n\nconst oldChats = localStorage.getItem('chats');\n\nlet peer,\n\tpeerIds = [];\n\nfunction App() {\n\tconst [userName, setUserName] = useState();\n\tconst [targetIdInput, setTargetIdInput] = useState();\n\tconst [userConnected, setUserConnected] = useState([]);\n\tconst [hasConnection, setHasConnection] = useState(false);\n\tconst [connections, setConnections] = useState({});\n\tconst [chats, setChats] = useState([]);\n\tconst [error, setError] = useState('');\n\n\t// First Step: Create the peer for the new user\n\tconst createPeer = () => {\n\t\tpeer = new Peer(getPeerId(userName));\n\n\t\tpeer.on('open', () => {\n\t\t\tsetHasConnection(true);\n\t\t});\n\t\tpeer.on('error', (error) => {\n\t\t\tconsole.error(error);\n\t\t\tif (error.type === 'peer-unavailable') {\n\t\t\t\tconsole.error(`${targetIdInput} is unreachable!`);\n\t\t\t\tsetError(`${targetIdInput} is unreachable!`);\n\t\t\t} else if (error.type === 'unavailable-id') {\n\t\t\t\tconsole.error(`${userName} is already taken!`);\n\t\t\t\tsetError(`${userName} is already taken!`);\n\t\t\t} else console.error(error);\n\t\t});\n\t\tpeer.on('connection', (conn) => {\n\t\t\tif (!peerIds.includes(conn.peer)) {\n\t\t\t\tconfigureConnection(conn);\n\n\t\t\t\tconn.on('open', () => {\n\t\t\t\t\taddConnection(conn);\n\t\t\t\t\tconn.send({\n\t\t\t\t\t\ttype: 'connections',\n\t\t\t\t\t\tpeerIds: peerIds,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\tconst updatePeerIds = (connectionList) => {\n\t\tpeerIds = Object.keys(connectionList);\n\t};\n\n\tconst addConnection = (conn) => {\n\t\tconsole.log('add connection');\n\t\tconst updatedConnections = { ...connections, [conn.peer]: conn };\n\t\tupdatePeerIds(updatedConnections);\n\t\tsetConnections(updatedConnections);\n\t\tconsole.log(`Connected to ${conn.peer}!`);\n\t};\n\n\tconst initiateConnection = (peerId) => {\n\t\tif (!peerIds.includes(peerId) && peerId !== peer.id) {\n\t\t\tconsole.log(`Connecting to ${peerId}...`);\n\t\t\tconsole.log('initiateConnection', peerIds);\n\t\t\tconst options = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tpeerIds,\n\t\t\t\t},\n\t\t\t\tserialization: 'json',\n\t\t\t};\n\t\t\tconst conn = peer.connect(peerId, options);\n\t\t\tconfigureConnection(conn);\n\n\t\t\tconn.on('open', () => {\n\t\t\t\taddConnection(conn);\n\t\t\t\tif (getUsername(conn.peer) === targetIdInput) {\n\t\t\t\t\tsetUserConnected([...userConnected, , targetIdInput]);\n\t\t\t\t\tconsole.log('connected');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst configureConnection = (conn) => {\n\t\tconn.on('data', (data) => {\n\t\t\tif (data.type === 'connections') {\n\t\t\t\tdata.peerIds.forEach((peerId) => {\n\t\t\t\t\tif (!connections[peerId]) {\n\t\t\t\t\t\tinitiateConnection(peerId);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (data.type === 'chat') {\n\t\t\t\treceiveChat(data.chat);\n\t\t\t}\n\t\t\t// please note here that if data.type is undefined, this endpoint won't do anything!\n\t\t});\n\t\tconn.on('close', () => {\n\t\t\tconsole.log('connectin close');\n\t\t\tremoveConnection(conn);\n\t\t});\n\t\tconn.on('error', (err) => {\n\t\t\tconsole.log('connectin error', err);\n\t\t\tremoveConnection(conn);\n\t\t});\n\n\t\t// if the caller joins have a call, we merge calls\n\t\tconn.metadata.peerIds.forEach((peerId) => {\n\t\t\tif (!connections[peerId]) {\n\t\t\t\tinitiateConnection(peerId);\n\t\t\t}\n\t\t});\n\t};\n\tconst submitConnection = () => {\n\t\tconst peerId = getPeerId(targetIdInput);\n\t\tinitiateConnection(peerId);\n\t};\n\tconst removeConnection = (conn) => {\n\t\tconst updatedConnections = { ...connections };\n\t\tdelete updatedConnections[conn.peer];\n\t\tsetConnections(updatedConnections);\n\t\tupdatePeerIds(updatedConnections);\n\t};\n\tconst receiveChat = (chat) => {\n\t\tconst updatedChats = [...chats, chat];\n\t\tsetChats((chats) => [...chats, chat]);\n\t\tlocalStorage.setItem('chats', JSON.stringify(updatedChats));\n\t};\n\tconst submitChat = (messageText) => {\n\t\tif (messageText.length > 0) {\n\t\t\tconst chat = {\n\t\t\t\tsender: userName,\n\t\t\t\tmessage: messageText,\n\t\t\t\ttimestamp: new Date().getTime(),\n\t\t\t};\n\t\t\tsetChats((chats) => [...chats, chat]);\n\t\t\tObject.values(connections).forEach((conn) => {\n\t\t\t\tconn.send({\n\t\t\t\t\ttype: 'chat',\n\t\t\t\t\tchat,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n\tconst disconnectPeer = () => {\n\t\tpeer.disconnect();\n\t};\n\n\tif (hasConnection)\n\t\treturn (\n\t\t\t<ChatRoom\n\t\t\t\tuserName={userName}\n\t\t\t\tpeerIds={peerIds}\n\t\t\t\tsetTargetIdInput={setTargetIdInput}\n\t\t\t\tsubmitConnection={submitConnection}\n\t\t\t\tsubmitChat={submitChat}\n\t\t\t\tchats={chats}\n\t\t\t\tdisconnectPeer={disconnectPeer}\n\t\t\t/>\n\t\t);\n\n\treturn (\n\t\t<Login error={error} createPeer={createPeer} setUserName={setUserName} />\n\t);\n}\n\nexport default App;\n","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/reportWebVitals.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/login/index.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/constants/index.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/utils/index.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/assets/bg-landing.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/login/bg-shapes.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/chat-room/index.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/chat-room/target-user/index.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/chat-room/chat/index.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":9,"column":7,"nodeType":"58","messageId":"59","endLine":9,"endColumn":15},{"ruleId":"60","severity":1,"message":"61","line":83,"column":23,"nodeType":"62","messageId":"63","endLine":83,"endColumn":58},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'oldChats' is assigned a value but never used.","Identifier","unusedVar","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","no-global-assign","no-unsafe-negation"]