[{"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/index.js":"1","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/App.js":"2","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/reportWebVitals.js":"3","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/login/index.js":"4","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/target-user/index.js":"5","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/constants/index.js":"6","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/chat/index.js":"7","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/utils/index.js":"8","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/assets/bg-landing.js":"9","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/login/bg-shapes.js":"10"},{"size":500,"mtime":1612037878377,"results":"11","hashOfConfig":"12"},{"size":4227,"mtime":1612084293598,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1612037878379,"results":"14","hashOfConfig":"12"},{"size":2794,"mtime":1612093975381,"results":"15","hashOfConfig":"12"},{"size":401,"mtime":1612083904567,"results":"16","hashOfConfig":"12"},{"size":94,"mtime":1612083954960,"results":"17","hashOfConfig":"12"},{"size":587,"mtime":1612084038499,"results":"18","hashOfConfig":"12"},{"size":191,"mtime":1612084187790,"results":"19","hashOfConfig":"12"},{"size":1910,"mtime":1612092236406,"results":"20","hashOfConfig":"12"},{"size":841,"mtime":1612092385633,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"yumzh",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/index.js",[],["44","45"],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/App.js",["46"],"import { useState } from 'react';\nimport Peer from 'peerjs';\n\nimport Chat from './components/chat';\nimport Login from './components/login';\nimport TargetUser from './components/target-user';\n\nimport { getPeerId, getUsername } from './utils';\n\nconst oldChats = localStorage.getItem('chats');\n\nlet peer,\n\tpeerIds = [];\n\nfunction App() {\n\tconst [userName, setUserName] = useState();\n\tconst [targetIdInput, setTargetIdInput] = useState();\n\tconst [hasConnection, setHasConnection] = useState(false);\n\tconst [connections, setConnections] = useState({});\n\tconst [chats, setChats] = useState([]);\n\n\t// First Step: Create the peer for the new user\n\tconst createPeer = () => {\n\t\tpeer = new Peer(getPeerId(userName));\n\n\t\tpeer.on('open', () => {\n\t\t\tsetHasConnection(true);\n\t\t});\n\t\tpeer.on('error', (error) => {\n\t\t\tconsole.error(error);\n\t\t\tif (error.type === 'peer-unavailable') {\n\t\t\t\tconsole.error(`${targetIdInput} is unreachable!`);\n\t\t\t} else if (error.type === 'unavailable-id') {\n\t\t\t\tconsole.error(`${userName} is already taken!`);\n\t\t\t} else console.error(error);\n\t\t});\n\t\tpeer.on('connection', (conn) => {\n\t\t\tif (!peerIds.includes(conn.peer)) {\n\t\t\t\tconfigureConnection(conn);\n\n\t\t\t\tconn.on('open', () => {\n\t\t\t\t\taddConnection(conn);\n\t\t\t\t\tconn.send({\n\t\t\t\t\t\ttype: 'connections',\n\t\t\t\t\t\tpeerIds: peerIds,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\tconst updatePeerIds = (connectionList) => {\n\t\tpeerIds = Object.keys(connectionList);\n\t};\n\n\tconst addConnection = (conn) => {\n\t\tconsole.log('add connection');\n\t\tconst updatedConnections = { ...connections, [conn.peer]: conn };\n\t\tupdatePeerIds(updatedConnections);\n\t\tsetConnections(updatedConnections);\n\t\tconsole.log(`Connected to ${conn.peer}!`);\n\t};\n\n\tconst initiateConnection = (peerId) => {\n\t\tif (!peerIds.includes(peerId) && peerId !== peer.id) {\n\t\t\tconsole.log(`Connecting to ${peerId}...`);\n\t\t\tconsole.log('initiateConnection', peerIds);\n\t\t\tconst options = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tpeerIds,\n\t\t\t\t},\n\t\t\t\tserialization: 'json',\n\t\t\t};\n\t\t\tconsole.log(peerId, options);\n\t\t\tconst conn = peer.connect(peerId, options);\n\t\t\tconfigureConnection(conn);\n\n\t\t\tconn.on('open', () => {\n\t\t\t\taddConnection(conn);\n\t\t\t\tif (getUsername(conn.peer) === targetIdInput) {\n\t\t\t\t\tconsole.log('connectetd');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst configureConnection = (conn) => {\n\t\tconn.on('data', (data) => {\n\t\t\tconsole.log({ data });\n\t\t\tif (data.type === 'connections') {\n\t\t\t\tdata.peerIds.forEach((peerId) => {\n\t\t\t\t\tif (!connections[peerId]) {\n\t\t\t\t\t\tinitiateConnection(peerId);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (data.type === 'chat') {\n\t\t\t\treceiveChat(data.chat);\n\t\t\t}\n\t\t\t// please note here that if data.type is undefined, this endpoint won't do anything!\n\t\t});\n\t\tconn.on('close', () => {\n\t\t\tconsole.log('connectin close');\n\t\t\tremoveConnection(conn);\n\t\t});\n\t\tconn.on('error', (err) => {\n\t\t\tconsole.log('connectin error', err);\n\t\t\tremoveConnection(conn);\n\t\t});\n\n\t\t// if the caller joins have a call, we merge calls\n\t\tconn.metadata.peerIds.forEach((peerId) => {\n\t\t\tif (!connections[peerId]) {\n\t\t\t\tinitiateConnection(peerId);\n\t\t\t}\n\t\t});\n\t};\n\tconst submitConnection = () => {\n\t\tconst peerId = getPeerId(targetIdInput);\n\t\tinitiateConnection(peerId);\n\t};\n\tconst removeConnection = (conn) => {\n\t\tconst updatedConnections = { ...connections };\n\t\tdelete updatedConnections[conn.peer];\n\t\tsetConnections(updatedConnections);\n\t\tupdatePeerIds(updatedConnections);\n\t};\n\tconst receiveChat = (chat) => {\n\t\tconst updatedChats = [...chats, chat];\n\t\tsetChats(updatedChats);\n\t\tlocalStorage.setItem('chats', JSON.stringify(updatedChats));\n\t};\n\tconst submitChat = (messageText) => {\n\t\tif (messageText.length > 0) {\n\t\t\tconst chat = {\n\t\t\t\tsender: userName,\n\t\t\t\tmessage: messageText,\n\t\t\t\ttimestamp: new Date().getTime(),\n\t\t\t};\n\t\t\tObject.values(connections).forEach((conn) => {\n\t\t\t\tconn.send({\n\t\t\t\t\ttype: 'chat',\n\t\t\t\t\tchat,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n\tconst disconnectPeer = () => {\n\t\tpeer.disconnect();\n\t};\n\n\tif (hasConnection)\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<TargetUser\n\t\t\t\t\tsetTargetIdInput={setTargetIdInput}\n\t\t\t\t\tsubmitConnection={submitConnection}\n\t\t\t\t/>\n\t\t\t\t<button onClick={disconnectPeer}>Disconnect</button>\n\t\t\t\t<Chat sendMessage={submitChat} chats={chats} />\n\t\t\t</div>\n\t\t);\n\treturn <Login createPeer={createPeer} setUserName={setUserName} />;\n}\n\nexport default App;\n","/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/reportWebVitals.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/login/index.js",["47","48"],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/target-user/index.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/constants/index.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/chat/index.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/utils/index.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/assets/bg-landing.js",[],"/Users/whisky/Documents/programacion/react/react-web/serverless-chat-app/src/components/login/bg-shapes.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":10,"column":7,"nodeType":"55","messageId":"56","endLine":10,"endColumn":15},{"ruleId":"53","severity":1,"message":"57","line":68,"column":7,"nodeType":"55","messageId":"56","endLine":68,"endColumn":17},{"ruleId":"53","severity":1,"message":"58","line":78,"column":7,"nodeType":"55","messageId":"56","endLine":78,"endColumn":18},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'oldChats' is assigned a value but never used.","Identifier","unusedVar","'DetailsApp' is assigned a value but never used.","'DetailsGrid' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]